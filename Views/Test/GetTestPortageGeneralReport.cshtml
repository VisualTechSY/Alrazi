@using Alrazi.Models.Test
@using Alrazi.Tools
@using Alrazi.ViewModel
@model List<TestPortage>
@{
    ViewData["Title"] = "الإحصاء العام ( البورتج )";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box">
            <div class="page-title-right">
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="~/Panel">الرئيسية</a></li>
                    <li class="breadcrumb-item active">الإحصاء العام ( البورتج )</li>
                </ol>
            </div>
            <h4 class="page-title">الإحصاء العام ( البورتج )</h4>
        </div>
    </div>
</div>
<!-- end page title -->

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <form method="get" class="row">
                    <div class="col-md-3">
                        <label>بحث من تاريخ</label>
                        <input type="date" id="fromDate" name="fromDate" class="form-control" value="@ViewBag.fromDate">
                    </div>
                    <div class="col-md-3">
                        <label>إلى تاربخ</label>
                        <input type="date" id="toDate" name="toDate" class="form-control" value="@ViewBag.toDate">
                    </div>
                    <div class="col-md-3 mt-3">
                        <button type="submit" class="btn btn-primary">بحث</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@if (Model is not null)
{
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <table class="table table-centered mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>العمر</th>
                                <th>نوع الشدة</th>
                                <th>العدد</th>
                                <th colspan="4">تصنيف النسبة</th>
                            </tr>
                            <tr>
                                <th></th>
                                <th></th>
                                <th>ذكر</th>
                                <th>أنثى</th>
                                <th>الكل</th>
                                <th>التصنيف</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var categories = new[] {
                                        new { Name = "شديد جدًا", Min = 0, Max = 39, Label = "رعاية" },
                                        new { Name = "شديد", Min = 40, Max = 54, Label = "قابل للتأهيل" },
                                        new { Name = "متوسط", Min = 55, Max = 69, Label = "قابل للتعليم" },
                                        new { Name = "طبيعي", Min = 70, Max = 100, Label = "مدرسة" }
                                        };

                                var statTable = categories.Select(cat => new
                                {
                                    Category = cat.Name,
                                    Label = cat.Label,
                                    Male = Model.Count(x => x.Student.Gender == "ذكر" && GetMark(x) >= cat.Min && GetMark(x) <= cat.Max),
                                    Female = Model.Count(x => x.Student.Gender == "أنثى" && GetMark(x) >= cat.Min && GetMark(x) <= cat.Max),
                                    Total = Model.Count(x => GetMark(x) >= cat.Min && GetMark(x) <= cat.Max)
                                }).ToList();

                                double GetMark(TestPortage item) => item.TestPortageDetails.Average(d => d.Mark);
                                foreach (var row in statTable)
                                {
                                    <tr>
                                        <td>--</td>
                                        <td>@row.Category</td>
                                        <td>@row.Male</td>
                                        <td>@row.Female</td>
                                        <td>@row.Total</td>
                                        <td>@row.Label</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>



    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <table class="table table-centered mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>رقم التقييم</th>
                                <th>الاسم</th>
                                <th>تاريخ التقييم</th>
                                <th>العمر الزمني</th>
                                <th>العمر النمائي</th>
                                <th>تأخر</th>
                                <th>الشدة</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.SerialNumber</td>
                                    <td>@item.Student.FullName</td>
                                    <td>@item.TestDate.ToString("dd/M/yyyy")</td>
                                    <td>@(new Birthday(item.Student.BirthDate, item.TestDate).ToString())</td>
                                    <td>
                                        @{
                                            int sum = 0;
                                            foreach (var item2 in item.TestPortageDetails)
                                            {
                                                sum += int.Parse(item2.AgeGrowthYear) * 12;
                                                sum += int.Parse(item2.AgeGrowthMonth);
                                            }
                                            sum /= item.TestPortageDetails.Count;
                                            @((sum / 12) + "." + (sum % 12))
                                        }


                                    </td>
                                    <td>
                                        @{
                                            int sumDiffAge = 0;
                                            foreach (var item2 in item.TestPortageDetails)
                                            {
                                                //الفرق بين الزمني والنمائي
                                                var temp = Birthday.CalcAgeMinusMonth((new Birthday(item.Student.BirthDate, item.TestDate).GetDecimalAge), item2.AgeGrowth);
                                                //اضافة المجموع
                                                sumDiffAge += Birthday.ConvertFromDecimalToMonth(temp);
                                            }
                                            sumDiffAge /= item.TestPortageDetails.Count;

                                            @((sumDiffAge / 12) + "." + (sumDiffAge % 12))
                                        }

                                    </td>
                                    <td>
                                        @{
                                            var mark = item.TestPortageDetails.Average(x => x.Mark);
                                            var markResult = mark + "%\t" + TestManager.GetTestPortageResault(mark);
                                            @markResult
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}
